        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Constructor sets an empty board and specifies it is X's turn first
        6:    8:TicTacToeBoard::TicTacToeBoard()
        -:    9:{
        6:   10:  turn = X;
       24:   11:  for(int i=0; i<BOARDSIZE; i++)
       72:   12:    for(int j=0; j<BOARDSIZE; j++)
       54:   13:      board[i][j] = Blank;
        6:   14:}
        -:   15:
        -:   16:/**
        -:   17: * Switches turn member variable to represent whether it's X's or O's turn
        -:   18: * and returns whose turn it is
        -:   19:**/
        3:   20:Piece TicTacToeBoard::toggleTurn()
        -:   21:{
        3:   22:  if (turn == X){
        2:   23:    turn = O;
        2:   24:    return turn;
        1:   25:  } else if (turn == O){
        1:   26:    turn = X;
        1:   27:    return turn;
        -:   28:  }
    #####:   29:}
        -:   30:
        -:   31:/**
        -:   32: * Places the piece of the current turn on the board, returns what
        -:   33: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   34: * NOT allow to place a piece in a location where there is already a piece.
        -:   35: * In that case, placePiece just returns what is already at that location. 
        -:   36: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   37: * is over, no more pieces can be placed so attempting to place a piece
        -:   38: * should neither change the board nor change whose turn it is.
        -:   39:**/ 
        4:   40:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   41:{
        4:   42:  if (row <= 0 || column <= 0 || row > 3 || column > 3){
        4:   43:    return Invalid;
        -:   44:  }
    #####:   45:  return Invalid;
        -:   46:}
        -:   47:
        -:   48:/**
        -:   49: * Returns what piece is at the provided coordinates, or Blank if there
        -:   50: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   51:**/
    #####:   52:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   53:{
    #####:   54:  return Invalid;
        -:   55:}
        -:   56:
        -:   57:/**
        -:   58: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   59: * is not over, or Blank if the board is filled and no one has won.
        -:   60:**/
    #####:   61:Piece TicTacToeBoard::getWinner()
        -:   62:{
    #####:   63:  return Invalid;
        -:   64:}
